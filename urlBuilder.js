// urlBuilder.js

/**
 * Constr√≥i URLs do Im√≥Virtual com base nos par√¢metros de pesquisa
 */
export class UrlBuilder {

    /**
     * Constr√≥i URL principal do Im√≥Virtual
     * CORRIGIDO: N√£o usa priceRange NEM area para filtrar a pesquisa
     */
    static buildSearchUrl(searchParams) {
        const { 
            searchType, 
            rooms, 
            location, 
            condition, 
            propertyType = 'apartamento' 
        } = searchParams;

        console.log('üîó A construir URL com par√¢metros:', searchParams);

        // Base URL
        let baseUrl = 'https://www.imovirtual.com/pt/resultados/';
        baseUrl += searchType === 'rent' ? 'arrendar/' : 'comprar/';
        baseUrl += propertyType;

        // Adicionar tipologia se especificada
        if (rooms) {
            const roomNum = rooms.replace('T', '').toLowerCase();
            baseUrl += `,t${roomNum}`;
        }

        // Adicionar localiza√ß√£o se encontrada
        if (location && location.id) {
            baseUrl += `/${location.id}`;
            console.log(`üìç Localiza√ß√£o adicionada: ${location.name} (${location.id})`);
        }

        // Par√¢metros de query
        const params = new URLSearchParams();
        params.set('limit', '36');
        params.set('ownerTypeSingleSelect', 'ALL');
        params.set('by', 'DEFAULT');
        params.set('direction', 'DESC');

        // Adicionar condi√ß√£o do im√≥vel
        if (condition) {
            switch (condition) {
                case 'new':
                    params.set('search[filter_enum_builttype]', '0');
                    console.log('üèóÔ∏è Filtro: Im√≥veis novos');
                    break;
                case 'used':
                    params.set('search[filter_enum_builttype]', '1');
                    console.log('üè† Filtro: Im√≥veis usados');
                    break;
                case 'renovated':
                    params.set('search[filter_enum_builttype]', '2');
                    console.log('üî® Filtro: Im√≥veis renovados');
                    break;
            }
        }

        // CORRIGIDO: N√ÉO adicionar filtro de pre√ßo (apenas usar para compara√ß√£o posterior)
        console.log('‚ö†Ô∏è  Filtro de pre√ßo REMOVIDO - pesquisa sem limita√ß√£o de pre√ßo');

        // CORRIGIDO: N√ÉO adicionar filtro de √°rea (apenas usar para compara√ß√£o posterior)
        console.log('‚ö†Ô∏è  Filtro de √°rea REMOVIDO - pesquisa sem limita√ß√£o de √°rea');

        const finalUrl = baseUrl + '?' + params.toString();
        console.log(`üåê URL constru√≠da: ${finalUrl}`);

        return finalUrl;
    }

    /**
     * Constr√≥i URLs alternativas se a principal n√£o der resultados
     * CORRIGIDO: Reduzido o n√∫mero de alternativas para n√£o interferir
     */
    static buildFallbackUrls(searchParams) {
        console.log('üîÑ A gerar URLs alternativas (REDUZIDAS)...');

        const fallbackUrls = [];
        const baseParams = { ...searchParams };

        // APENAS 1 alternativa: Remover tipologia se existir
        if (baseParams.rooms) {
            const noRoomsParams = { ...baseParams };
            delete noRoomsParams.rooms;
            fallbackUrls.push({
                url: this.buildSearchUrl(noRoomsParams),
                description: 'Pesquisa sem filtro de tipologia (mesma localiza√ß√£o)'
            });
            console.log('üìù Adicionada 1 alternativa: sem filtro de tipologia');
        }

        // Se n√£o tem tipologia, adicionar alternativa sem localiza√ß√£o
        else if (baseParams.location) {
            const noLocationParams = { ...baseParams };
            delete noLocationParams.location;
            fallbackUrls.push({
                url: this.buildSearchUrl(noLocationParams),
                description: 'Pesquisa sem filtro de localiza√ß√£o'
            });
            console.log('üìù Adicionada 1 alternativa: sem filtro de localiza√ß√£o');
        }

        console.log(`üîÑ ${fallbackUrls.length} URLs alternativas geradas (REDUZIDAS para evitar interfer√™ncia)`);
        return fallbackUrls;
    }

    /**
     * Valida se uma URL est√° bem formada
     */
    static validateUrl(url) {
        try {
            const urlObj = new URL(url);
            const isImovirtual = urlObj.hostname.includes('imovirtual.com');
            const hasSearchPath = urlObj.pathname.includes('/resultados/');
            
            const isValid = isImovirtual && hasSearchPath;
            console.log(`üîç URL ${isValid ? 'v√°lida' : 'inv√°lida'}: ${url.substring(0, 100)}...`);
            
            return isValid;
        } catch (error) {
            console.log(`‚ùå Erro na valida√ß√£o da URL: ${error.message}`);
            return false;
        }
    }
}
