import { Actor } from 'apify';
import { CheerioCrawler, log } from 'crawlee';

// Configura√ß√£o inicial
await Actor.init();

// Fun√ß√£o para extrair crit√©rios da query
function extractCriteria(query) {
    const criteria = {
        location: '',
        rooms: '',
        area: '',
        condition: '',
        type: 'apartamento'
    };
    
    const lowerQuery = query.toLowerCase();
    
    // Localiza√ß√£o
    const locationPatterns = [
        /caldas da rainha/i,
        /lisboa/i,
        /porto/i,
        /coimbra/i,
        /braga/i,
        /faro/i,
        /aveiro/i,
        /leiria/i
    ];
    
    for (const pattern of locationPatterns) {
        const match = query.match(pattern);
        if (match) {
            criteria.location = match[0].toLowerCase();
            break;
        }
    }
    
    // Tipologia
    const roomsMatch = query.match(/T(\d)/i);
    if (roomsMatch) {
        criteria.rooms = roomsMatch[0].toUpperCase();
    }
    
    // Estado
    if (lowerQuery.includes('novo')) criteria.condition = 'novo';
    if (lowerQuery.includes('usado')) criteria.condition = 'usado';
    if (lowerQuery.includes('renovado')) criteria.condition = 'renovado';
    
    return criteria;
}

// Fun√ß√£o para construir URLs
function buildURLs(criteria) {
    const urls = [];
    
    // Im√≥Virtual
    let imovirtualURL = 'https://www.imovirtual.com/comprar/apartamento';
    if (criteria.location) {
        imovirtualURL += `/${criteria.location.replace(/\s+/g, '-')}`;
    }
    
    const imovirtualParams = [];
    if (criteria.rooms) {
        const roomNumber = criteria.rooms.replace('T', '');
        imovirtualParams.push(`search%255Bfilter_float_number_of_rooms%253Afrom%255D=${roomNumber}`);
        imovirtualParams.push(`search%255Bfilter_float_number_of_rooms%253Ato%255D=${roomNumber}`);
    }
    
    if (imovirtualParams.length > 0) {
        imovirtualURL += '?' + imovirtualParams.join('&');
    }
    
    urls.push({
        url: imovirtualURL,
        site: 'Imovirtual',
        handler: 'imovirtual'
    });
    
    // ERA Portugal
    let eraURL = 'https://www.era.pt/comprar/apartamentos';
    if (criteria.location) {
        eraURL += `/${criteria.location.replace(/\s+/g, '-')}`;
    }
    
    urls.push({
        url: eraURL,
        site: 'ERA Portugal',
        handler: 'era'
    });
    
    return urls;
}

// Fun√ß√£o para limpar texto
function cleanText(text) {
    return text ? text.replace(/\s+/g, ' ').trim() : '';
}

// Fun√ß√£o para extrair pre√ßo
function extractPrice(text) {
    if (!text) return null;
    const priceMatch = text.match(/([\d\s]+)\s*‚Ç¨/);
    if (priceMatch) {
        return parseInt(priceMatch[1].replace(/\s/g, ''));
    }
    return null;
}

// Fun√ß√£o para extrair √°rea
function extractArea(text) {
    if (!text) return null;
    const areaMatch = text.match(/([\d,\.]+)\s*m¬≤/);
    if (areaMatch) {
        return parseFloat(areaMatch[1].replace(',', '.'));
    }
    return null;
}

// Handler para Im√≥Virtual (CORRIGIDO)
async function handleImovirtual($, url) {
    console.log('\nüè† Processando Imovirtual...');
    
    const properties = [];
    
    // Usar o seletor descoberto no debug
    const listings = $('article.css-xv0nyo');
    console.log(`üìä Encontrados ${listings.length} im√≥veis`);
    
    listings.each((index, element) => {
        try {
            const $element = $(element);
            
            // Link do im√≥vel usando seletor data-cy descoberto
            const linkElement = $element.find('[data-cy="listing-item-link"]');
            const relativeUrl = linkElement.attr('href');
            const link = relativeUrl ? `https://www.imovirtual.com${relativeUrl}` : null;
            
            // T√≠tulo usando seletor data-cy descoberto
            const title = cleanText($element.find('[data-cy="listing-item-title"]').text()) ||
                         cleanText(linkElement.attr('title')) ||
                         cleanText(linkElement.text());
            
            // Extrair dados dos spans na ordem descoberta
            const spans = $element.find('span');
            let price = null, area = null, rooms = null, pricePerSqm = null;
            
            spans.each((i, span) => {
                const text = $(span).text().trim();
                
                // Pre√ßo principal (formato: "229 500 ‚Ç¨")
                if (text.match(/^\d[\d\s]*\s*‚Ç¨$/) && !price) {
                    price = extractPrice(text);
                }
                
                // Pre√ßo por m¬≤ (formato: "2120 ‚Ç¨/m¬≤")
                if (text.includes('‚Ç¨/m¬≤') && !pricePerSqm) {
                    pricePerSqm = extractPrice(text);
                }
                
                // Tipologia (formato: "T3")
                if (text.match(/^T\d+$/) && !rooms) {
                    rooms = text;
                }
                
                // √Årea (formato: "108.28 m¬≤")
                if (text.includes('m¬≤') && !text.includes('‚Ç¨') && !area) {
                    area = extractArea(text);
                }
            });
            
            // Localiza√ß√£o - extrair do t√≠tulo ou URL
            let location = '';
            if (title) {
                const locationMatch = title.match(/caldas da rainha|lisboa|porto|coimbra|braga|faro|aveiro|leiria/i);
                if (locationMatch) {
                    location = locationMatch[0];
                }
            }
            
            // S√≥ adicionar se tiver dados essenciais
            if (title && price && link) {
                const property = {
                    title: title,
                    price: price,
                    area: area,
                    rooms: rooms,
                    location: location,
                    pricePerSqm: pricePerSqm,
                    link: link,
                    site: 'Im√≥Virtual'
                };
                
                properties.push(property);
                
                console.log(`‚úÖ Im√≥vel ${index + 1}:`);
                console.log(`   üìã T√≠tulo: ${title}`);
                console.log(`   üí∞ Pre√ßo: ${price ? price.toLocaleString() + ' ‚Ç¨' : 'N/A'}`);
                console.log(`   üìê √Årea: ${area ? area + ' m¬≤' : 'N/A'}`);
                console.log(`   üè† Tipologia: ${rooms || 'N/A'}`);
                console.log(`   üìç Localiza√ß√£o: ${location || 'N/A'}`);
                console.log(`   üîó Link: ${link}`);
                console.log('');
            }
            
        } catch (error) {
            console.log(`‚ùå Erro ao processar im√≥vel ${index + 1}:`, error.message);
        }
    });
    
    console.log(`‚úÖ Im√≥Virtual processado: ${properties.length} im√≥veis encontrados`);
    return properties;
}

// üîß Handler para ERA Portugal (VERS√ÉO CORRIGIDA E MELHORADA)
async function handleERA($, url) {
    console.log('\nüè† Processando ERA Portugal...');
    
    const properties = [];
    
    // STEP 1: Verificar se o site requer JavaScript
    const bodyText = $('body').text();
    const htmlContent = $.html();
    
    console.log(`üìÑ Tamanho do HTML: ${htmlContent.length} caracteres`);
    console.log(`üìù Primeiros 200 caracteres do body: ${bodyText.substring(0, 200)}`);
    
    if (bodyText.includes('JavaScript disabled') || 
        bodyText.includes('enable JavaScript') || 
        bodyText.includes('please enable JavaScript') ||
        htmlContent.length < 1000) {
        console.log('‚ö†Ô∏è  ERA requer JavaScript - tentando estrat√©gias alternativas...');
        
        // Estrat√©gia 1: Tentar encontrar dados em scripts JSON
        const scriptTags = $('script[type="application/json"], script:contains("window."), script:contains("data")');
        console.log(`üìÑ Encontrados ${scriptTags.length} scripts para an√°lise`);
        
        let jsonDataFound = false;
        scriptTags.each((i, script) => {
            try {
                const scriptContent = $(script).html();
                if (scriptContent && scriptContent.includes('price') && scriptContent.includes('property')) {
                    console.log(`üìÑ Script ${i + 1} cont√©m dados: ${scriptContent.substring(0, 100)}...`);
                    // Tentar extrair dados JSON
                    const jsonMatch = scriptContent.match(/\{.*"properties".*\}/);
                    if (jsonMatch) {
                        const data = JSON.parse(jsonMatch[0]);
                        console.log('‚úÖ Dados JSON extra√≠dos com sucesso');
                        jsonDataFound = true;
                        return false; // break
                    }
                }
            } catch (e) {
                // Script n√£o √© JSON v√°lido, continuar
                console.log(`   Script ${i + 1} n√£o √© JSON v√°lido`);
            }
        });
        
        if (!jsonDataFound) {
            console.log('üîÑ Nenhum JSON √∫til encontrado, tentando abordagens alternativas...');
            return await tryAlternativeEraApproaches(url);
        }
    }
    
    // STEP 2: Site carregou HTML - tentar extrair dados
    console.log('‚úÖ Conte√∫do HTML dispon√≠vel, procurando propriedades...');
    
    // Lista expandida de seletores baseados em padr√µes comuns de sites imobili√°rios
    const selectors = [
        // Seletores espec√≠ficos ERA
        '.property-card',
        '.property-item', 
        '.listing-item',
        '.search-result-item',
        '.property-result',
        'div[class*="property"]',
        'div[class*="listing"]',
        'div[class*="imovel"]',
        
        // Seletores baseados em estrutura
        'article:has(.price), article:has([class*="price"])',
        'div:has(.price):has(.area)',
        'div:has([class*="euro"]):has([class*="metro"])',
        
        // Seletores gen√©ricos para cards
        '.card:has(a[href*="imovel"])',
        '.item:has(a[href*="propriedade"])',
        'div:has(a[href*="apartamento"])',
        
        // Seletores por atributos data
        '[data-property-id]',
        '[data-listing-id]',
        '[data-testid*="property"]',
        
        // √öltimo recurso - qualquer link para propriedades
        'a[href*="/imovel/"], a[href*="/propriedade/"], a[href*="/apartamento/"]'
    ];
    
    let bestMatch = { elements: $(), count: 0, selector: '' };
    
    // Testar cada seletor e encontrar o melhor
    for (const selector of selectors) {
        try {
            const elements = $(selector);
            let propertyCount = 0;
            
            // Verificar quantos elementos realmente cont√™m dados de propriedades
            elements.each((i, el) => {
                const text = $(el).text();
                const hasPrice = /\d+[\s\d]*\s*‚Ç¨/.test(text);
                const hasArea = /\d+[,.]?\d*\s*m¬≤/.test(text);
                const hasRooms = /T\d/.test(text);
                
                if (hasPrice && (hasArea || hasRooms)) {
                    propertyCount++;
                }
            });
            
            console.log(`üìä Seletor "${selector}": ${elements.length} elementos, ${propertyCount} com dados de propriedades`);
            
            if (propertyCount > bestMatch.count) {
                bestMatch = {
                    elements: elements,
                    count: propertyCount, 
                    selector: selector
                };
            }
        } catch (e) {
            console.log(`‚ùå Erro com seletor "${selector}": ${e.message}`);
        }
    }
    
    console.log(`üéØ Melhor seletor: "${bestMatch.selector}" com ${bestMatch.count} propriedades`);
    
    // STEP 3: Se n√£o encontrou nada, fazer busca agressiva
    if (bestMatch.count === 0) {
        console.log('üîç Fazendo busca agressiva por elementos com pre√ßos...');
        return await aggressiveERASearch($);
    }
    
    // STEP 4: Processar elementos encontrados
    bestMatch.elements.each((index, element) => {
        try {
            const $element = $(element);
            const property = extractERAPropertyData($element, $);
            
            if (property.title && property.price) {
                property.site = 'ERA Portugal';
                properties.push(property);
                
                console.log(`‚úÖ Im√≥vel ERA ${index + 1}:`);
                console.log(`   üìã T√≠tulo: ${property.title}`);
                console.log(`   üí∞ Pre√ßo: ${property.price.toLocaleString()} ‚Ç¨`);
                console.log(`   üìê √Årea: ${property.area ? property.area + ' m¬≤' : 'N/A'}`);
                console.log(`   üè† Tipologia: ${property.rooms || 'N/A'}`);
                console.log(`   üìç Localiza√ß√£o: ${property.location || 'N/A'}`);
                console.log(`   üîó Link: ${property.link || 'N/A'}`);
                console.log('');
            }
        } catch (error) {
            console.log(`‚ùå Erro ao processar im√≥vel ERA ${index + 1}:`, error.message);
        }
    });
    
    console.log(`‚úÖ ERA Portugal processado: ${properties.length} im√≥veis encontrados`);
    return properties;
}

// Fun√ß√£o auxiliar para extrair dados de propriedade ERA
function extractERAPropertyData($element, $global) {
    const elementText = $element.text();
    const elementHtml = $element.html();
    
    // Extrair pre√ßo
    const priceMatch = elementText.match(/([\d\s\.]+)\s*‚Ç¨/) || 
                      elementText.match(/‚Ç¨\s*([\d\s\.]+)/) ||
                      elementText.match(/([\d\s]+)\s*euros?/i);
    const price = priceMatch ? parseInt(priceMatch[1].replace(/[\s\.]/g, '')) : null;
    
    // Extrair √°rea
    const areaMatch = elementText.match(/([\d,\.]+)\s*m¬≤/) || 
                     elementText.match(/([\d,\.]+)\s*metros?/i);
    const area = areaMatch ? parseFloat(areaMatch[1].replace(',', '.')) : null;
    
    // Extrair tipologia
    const roomsMatch = elementText.match(/T(\d+)/i) || 
                      elementText.match(/(\d+)\s*quarto/i);
    const rooms = roomsMatch ? (roomsMatch[0].startsWith('T') ? roomsMatch[0] : `T${roomsMatch[1]}`) : null;
    
    // Extrair t√≠tulo
    let title = '';
    const titleSelectors = [
        'h1, h2, h3, h4',
        '.title, .titulo, .name',
        '[class*="title"], [class*="name"]',
        'a[href*="imovel"], a[href*="propriedade"]',
        'a'
    ];
    
    for (const selector of titleSelectors) {
        const titleEl = $element.find(selector).first();
        if (titleEl.length) {
            title = cleanText(titleEl.text()) || cleanText(titleEl.attr('title'));
            if (title && title.length > 5) break;
        }
    }
    
    // Se n√£o encontrou t√≠tulo, criar um gen√©rico
    if (!title) {
        title = rooms ? `Apartamento ${rooms}` : 'Apartamento';
        if (area) title += ` de ${area}m¬≤`;
        title += ' - ERA Portugal';
    }
    
    // Extrair link
    const linkElement = $element.find('a').first();
    let link = linkElement.attr('href');
    if (link && !link.startsWith('http')) {
        link = link.startsWith('/') ? `https://www.era.pt${link}` : `https://www.era.pt/${link}`;
    }
    
    // Extrair localiza√ß√£o (tentar do contexto ou URL)
    let location = '';
    const locationMatch = elementText.match(/caldas da rainha|lisboa|porto|coimbra|braga|faro|aveiro|leiria/gi);
    if (locationMatch) {
        location = locationMatch[0];
    } else if (link && link.includes('caldas')) {
        location = 'Caldas da Rainha';
    }
    
    return {
        title: title,
        price: price,
        area: area,
        rooms: rooms,
        location: location || 'N/A',
        link: link
    };
}

// Busca agressiva quando m√©todos normais falham
async function aggressiveERASearch($) {
    console.log('üö® Iniciando busca agressiva na ERA...');
    
    const properties = [];
    
    // Encontrar todos os elementos que cont√™m "‚Ç¨"
    const priceElements = $('*').filter(function() {
        const text = $(this).text();
        return text.includes('‚Ç¨') && /\d/.test(text) && $(this).children().length < 5;
    });
    
    console.log(`üí∞ Encontrados ${priceElements.length} elementos com pre√ßos`);
    
    const processedParents = new Set();
    
    priceElements.each((i, el) => {
        const $el = $(el);
        let $parent = $el.parent();
        
        // Subir na hierarquia para encontrar o container da propriedade
        for (let level = 0; level < 5 && $parent.length; level++) {
            const parentId = $parent[0];
            
            if (processedParents.has(parentId)) {
                break;
            }
            
            const parentText = $parent.text();
            
            // Verificar se este elemento pai tem dados completos de propriedade
            const hasPrice = /\d+[\s\d]*\s*‚Ç¨/.test(parentText);
            const hasArea = /\d+[,.]?\d*\s*m¬≤/.test(parentText);
            const hasRooms = /T\d/.test(parentText);
            const hasLink = $parent.find('a[href*="imovel"], a[href*="propriedade"], a[href*="apartamento"]').length > 0;
            
            if (hasPrice && (hasArea || hasRooms || hasLink)) {
                processedParents.add(parentId);
                
                const property = extractERAPropertyData($parent, $);
                
                if (property.title && property.price) {
                    property.site = 'ERA Portugal';
                    properties.push(property);
                    
                    console.log(`üéØ Propriedade encontrada agressivamente:`);
                    console.log(`   üìã ${property.title}`);
                    console.log(`   üí∞ ${property.price.toLocaleString()} ‚Ç¨`);
                }
                
                break;
            }
            
            $parent = $parent.parent();
        }
    });
    
    // Remover duplicados baseado em t√≠tulo e pre√ßo
    const uniqueProperties = [];
    const seen = new Set();
    
    for (const prop of properties) {
        const key = `${prop.title}-${prop.price}`;
        if (!seen.has(key)) {
            seen.add(key);
            uniqueProperties.push(prop);
        }
    }
    
    console.log(`üéØ Busca agressiva conclu√≠da: ${uniqueProperties.length} propriedades √∫nicas`);
    return uniqueProperties;
}

// Estrat√©gias alternativas quando JavaScript √© necess√°rio
async function tryAlternativeEraApproaches(url) {
    console.log('üîÑ Tentando abordagens alternativas para ERA...');
    
    // Por enquanto, retornar array vazio
    // Aqui poderia implementar:
    // - Chamadas para APIs diretas
    // - Parsing de dados de scripts embebidos
    // - Uso de proxies ou servi√ßos externos
    
    console.log('‚ÑπÔ∏è  Alternativas n√£o implementadas ainda - ERA requer JavaScript');
    console.log('üí° Sugest√£o: Considerar upgrade do Apify para usar Puppeteer ou Playwright');
    
    return [];
}

// Configura√ß√£o principal
const input = await Actor.getInput();
const query = input?.query || 'Im√≥vel T4 caldas da Rainha novo';

console.log('üî• Input recebido:', { query });
console.log(`üîç Query: "${query}"`);

const criteria = extractCriteria(query);
console.log('üìã Crit√©rios extra√≠dos:', criteria);

const urls = buildURLs(criteria);

// Log das URLs
urls.forEach(urlObj => {
    console.log(`üåê ${urlObj.site}: ${urlObj.url}`);
});

console.log('\nüöÄ Iniciando scraping...');

const allProperties = [];

const crawler = new CheerioCrawler({
    maxRequestsPerCrawl: 10,
    requestHandlerTimeoutSecs: 60,
    
    async requestHandler({ request, $, response }) {
        const url = request.url;
        const handler = request.userData.handler;
        
        console.log(`\nüìä Status: ${response.statusCode}`);
        
        if (response.statusCode !== 200) {
            console.log(`‚ùå Erro HTTP: ${response.statusCode}`);
            return;
        }
        
        console.log(`‚úÖ ${request.userData.site} acess√≠vel!`);
        
        let properties = [];
        
        try {
            if (handler === 'imovirtual') {
                properties = await handleImovirtual($, url);
            } else if (handler === 'era') {
                properties = await handleERA($, url);
            }
            
            allProperties.push(...properties);
            
        } catch (error) {
            console.log(`‚ùå Erro ao processar ${request.userData.site}:`, error.message);
        }
    },
});

// Adicionar URLs √† fila
for (const urlObj of urls) {
    await crawler.addRequests([{
        url: urlObj.url,
        userData: urlObj
    }]);
}

await crawler.run();

// Processar e filtrar resultados
console.log('\nüìä === RELAT√ìRIO FINAL ===');
console.log(`üè† Total de im√≥veis encontrados: ${allProperties.length}`);

// Filtrar por crit√©rios se especificados
let filteredProperties = allProperties;

if (criteria.rooms) {
    const beforeCount = filteredProperties.length;
    filteredProperties = filteredProperties.filter(p => p.rooms === criteria.rooms);
    console.log(`üîç Filtro tipologia ${criteria.rooms}: ${beforeCount} ‚Üí ${filteredProperties.length}`);
}

if (criteria.condition === 'novo') {
    const beforeCount = filteredProperties.length;
    filteredProperties = filteredProperties.filter(p => 
        p.title.toLowerCase().includes('novo') || 
        p.title.toLowerCase().includes('nova') ||
        p.title.toLowerCase().includes('novos')
    );
    console.log(`üîç Filtro condi√ß√£o 'novo': ${beforeCount} ‚Üí ${filteredProperties.length}`);
}

// Ordenar por pre√ßo
filteredProperties.sort((a, b) => (a.price || 0) - (b.price || 0));

console.log('\nüéØ === IM√ìVEIS ENCONTRADOS ===');
filteredProperties.forEach((property, index) => {
    console.log(`\n${index + 1}. ${property.title}`);
    console.log(`   üí∞ Pre√ßo: ${property.price ? property.price.toLocaleString() + ' ‚Ç¨' : 'N/A'}`);
    console.log(`   üìê √Årea: ${property.area ? property.area + ' m¬≤' : 'N/A'}`);
    console.log(`   üè† Tipologia: ${property.rooms || 'N/A'}`);
    console.log(`   üìç Local: ${property.location || 'N/A'}`);
    console.log(`   üåê Site: ${property.site}`);
    console.log(`   üîó Link: ${property.link || 'N/A'}`);
    
    if (property.pricePerSqm) {
        console.log(`   üíµ Pre√ßo/m¬≤: ${property.pricePerSqm} ‚Ç¨/m¬≤`);
    }
});

// MELHOR FORMATO DE OUTPUT - Salvar cada im√≥vel individualmente
const summary = {
    query: query,
    criteria: criteria,
    totalFound: allProperties.length,
    filteredCount: filteredProperties.length,
    searchUrls: urls.map(u => ({ site: u.site, url: u.url })),
    timestamp: new Date().toISOString()
};

// Salvar resumo
await Actor.pushData(summary);

// Salvar cada im√≥vel como entrada separada para melhor visualiza√ß√£o
for (let i = 0; i < filteredProperties.length; i++) {
    const property = filteredProperties[i];
    
    // Adicionar informa√ß√µes extras para cada im√≥vel
    const propertyData = {
        ...property,
        searchQuery: query,
        propertyIndex: i + 1,
        totalProperties: filteredProperties.length,
        priceFormatted: property.price ? `${property.price.toLocaleString()} ‚Ç¨` : 'N/A',
        areaFormatted: property.area ? `${property.area} m¬≤` : 'N/A',
        pricePerSqmFormatted: property.pricePerSqm ? `${property.pricePerSqm} ‚Ç¨/m¬≤` : 'N/A',
        timestamp: new Date().toISOString()
    };
    
    await Actor.pushData(propertyData);
}

console.log('\n‚úÖ Scraping conclu√≠do!');
console.log(`üìä Dados salvos: 1 resumo + ${filteredProperties.length} im√≥veis individuais`);

await Actor.exit();
