const { Actor } = require('apify');
const { RequestQueue, CheerioCrawler, Dataset } = require('crawlee');

const main = async () => {
    await Actor.init();
    
    const input = await Actor.getInput();
    console.log('üì• Input recebido:', input);
    
    const query = input.query || input.searchQuery || '';
    
    if (!query) {
        console.log('‚ùå Nenhuma query fornecida');
        await Actor.exit();
        return;
    }
    
    console.log(`üîç Query: "${query}"`);
    
    const searchCriteria = parseQuery(query);
    console.log('üìã Crit√©rios extra√≠dos:', searchCriteria);
    
    function buildImovirtualUrl(criteria) {
        let url = 'https://www.imovirtual.com/comprar';
        
        if (criteria.type === 'apartamento') {
            url += '/apartamento';
        } else if (criteria.type === 'moradia') {
            url += '/moradia';
        }
        
        if (criteria.location) {
            const locationSlug = criteria.location.toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/√£/g, 'a')
                .replace(/√µ/g, 'o')
                .replace(/√°/g, 'a')
                .replace(/√©/g, 'e')
                .replace(/√≠/g, 'i')
                .replace(/√≥/g, 'o')
                .replace(/√∫/g, 'u')
                .replace(/√ß/g, 'c');
            url += `/${locationSlug}`;
        }
        
        const params = new URLSearchParams();
        
        if (criteria.rooms) {
            const roomNum = criteria.rooms.replace('T', '');
            params.append('search%5Bfilter_float_number_of_rooms%3Afrom%5D', roomNum);
            params.append('search%5Bfilter_float_number_of_rooms%3Ato%5D', roomNum);
        }
        
        if (criteria.area) {
            params.append('search%5Bfilter_float_m%3Afrom%5D', Math.max(1, criteria.area - 20));
            params.append('search%5Bfilter_float_m%3Ato%5D', criteria.area + 20);
        }
        
        const queryString = params.toString();
        return queryString ? `${url}?${queryString}` : url;
    }

    function buildEraUrl(criteria) {
        let url = 'https://www.era.pt/comprar';
        
        if (criteria.type === 'apartamento') {
            url += '/apartamentos';
        } else if (criteria.type === 'moradia') {
            url += '/moradias';
        }
        
        if (criteria.location) {
            const locationSlug = criteria.location.toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/√£/g, 'a')
                .replace(/√µ/g, 'o')
                .replace(/√°/g, 'a')
                .replace(/√©/g, 'e')
                .replace(/√≠/g, 'i')
                .replace(/√≥/g, 'o')
                .replace(/√∫/g, 'u')
                .replace(/√ß/g, 'c');
            url += `/${locationSlug}`;
        }
        
        return url;
    }

    const propertySites = [
        {
            name: 'Imovirtual',
            baseUrl: 'https://www.imovirtual.com',
            buildSearchUrl: buildImovirtualUrl
        },
        {
            name: 'ERA Portugal',
            baseUrl: 'https://www.era.pt',
            buildSearchUrl: buildEraUrl
        }
    ];
    
    const requestQueue = await RequestQueue.open();
    
    for (const site of propertySites) {
        try {
            const searchUrl = site.buildSearchUrl(searchCriteria);
            if (searchUrl) {
                console.log(`üåê ${site.name}: ${searchUrl}`);
                await requestQueue.addRequest({ 
                    url: searchUrl,
                    userData: { site, criteria: searchCriteria },
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'pt-PT,pt;q=0.9,en;q=0.8',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1'
                    }
                });
            }
        } catch (error) {
            console.log(`‚ùå Erro ao construir URL para ${site.name}:`, error.message);
        }
    }
    
    const crawler = new CheerioCrawler({
        requestQueue,
        maxRequestRetries: 2,
        maxConcurrency: 1,
        maxRequestsPerMinute: 1,
        requestHandlerTimeoutSecs: 60,
        requestHandler: async ({ request, $, response }) => {
            const { site, criteria } = request.userData;
            
            console.log(`\nüè† Processando ${site.name}...`);
            console.log(`üìä Status: ${response.statusCode}`);
            
            if (response.statusCode !== 200) {
                console.log(`‚ùå ${site.name} - Status: ${response.statusCode}`);
                return;
            }
            
            console.log(`‚úÖ ${site.name} acess√≠vel!`);
            console.log(`üìÑ Tamanho da p√°gina: ${$.html().length} caracteres`);
            
            if (site.name === 'Imovirtual') {
                await debugImovirtualStructure($, criteria);
            } else {
                await debugERAStructure($, criteria);
            }
        },
        failedRequestHandler: async ({ request, error }) => {
            console.log(`‚ùå Falha em ${request.userData.site.name}: ${error.message}`);
        },
    });
    
    console.log('\nüöÄ Iniciando scraping...');
    await crawler.run();
    
    console.log(`\nüéâ Debug conclu√≠do!`);
    await Actor.exit();
};

// FUN√á√ÉO DE DEBUG DETALHADO PARA IMOVIRTUAL
async function debugImovirtualStructure($, criteria) {
    console.log('\nüîç === DEBUG DETALHADO IMOVIRTUAL ===');
    
    // Testar v√°rios seletores de container
    const containerTests = [
        'article[data-cy="search.listing.organic"]',
        'article[data-testid="listing-organic"]',
        'article',
        'div[class*="offer"]',
        'div[class*="listing"]',
        'li[class*="offer"]'
    ];
    
    let bestContainer = null;
    let bestCount = 0;
    
    for (const selector of containerTests) {
        const found = $(selector);
        console.log(`üîç Teste container "${selector}": ${found.length} elementos`);
        
        if (found.length > bestCount) {
            bestCount = found.length;
            bestContainer = selector;
        }
    }
    
    if (!bestContainer || bestCount === 0) {
        console.log('‚ùå Nenhum container encontrado!');
        return;
    }
    
    console.log(`\n‚úÖ Melhor container: "${bestContainer}" com ${bestCount} elementos`);
    
    // Analisar os primeiros 3 elementos
    const containers = $(bestContainer);
    
    for (let i = 0; i < Math.min(3, containers.length); i++) {
        const $el = $(containers[i]);
        
        console.log(`\nüèòÔ∏è === AN√ÅLISE DETALHADA DO IM√ìVEL ${i + 1} ===`);
        
        // 1. ESTRUTURA GERAL
        console.log('üìê Estrutura do elemento:');
        console.log(`   - Classe principal: ${$el.attr('class') || 'N/A'}`);
        console.log(`   - Data attributes: ${Object.keys($el.get(0).attribs || {}).filter(k => k.startsWith('data-')).join(', ') || 'N/A'}`);
        
        // 2. AN√ÅLISE DE LINKS
        console.log('\nüîó Links encontrados:');
        const links = $el.find('a');
        links.each((j, link) => {
            const $link = $(link);
            const href = $link.attr('href');
            const text = $link.text().trim();
            if (href && href !== '#' && text.length > 0) {
                console.log(`   Link ${j + 1}: "${text.substring(0, 50)}" ‚Üí ${href.substring(0, 50)}`);
            }
        });
        
        // 3. AN√ÅLISE DE TEXTOS COM N√öMEROS
        console.log('\nüî¢ Textos com n√∫meros/s√≠mbolos relevantes:');
        const allText = $el.text();
        
        // Procurar pre√ßos
        const priceMatches = allText.match(/\d{1,3}(?:[\.\s]\d{3})*(?:,\d{2})?\s*‚Ç¨/g);
        if (priceMatches) {
            console.log(`   üí∞ Pre√ßos encontrados: ${priceMatches.join(', ')}`);
        }
        
        // Procurar √°reas
        const areaMatches = allText.match(/\d+(?:[,\.]\d+)?\s*m[¬≤2]/gi);
        if (areaMatches) {
            console.log(`   üìê √Åreas encontradas: ${areaMatches.join(', ')}`);
        }
        
        // Procurar quartos/tipologias
        const roomMatches = allText.match(/T[0-6]|\d+\s*quarto[s]?/gi);
        if (roomMatches) {
            console.log(`   üè† Quartos encontrados: ${roomMatches.join(', ')}`);
        }
        
        // 4. AN√ÅLISE DE ELEMENTOS FILHOS ESPEC√çFICOS
        console.log('\nüéØ Elementos filhos relevantes:');
        
        // Procurar por spans/divs que contenham dados espec√≠ficos
        $el.find('span, div').each((j, child) => {
            const $child = $(child);
            const text = $child.text().trim();
            const classes = $child.attr('class') || '';
            const dataAttrs = Object.keys($child.get(0).attribs || {}).filter(k => k.startsWith('data-'));
            
            // S√≥ mostrar elementos com dados √∫teis
            if ((text.includes('‚Ç¨') || text.includes('m¬≤') || text.includes('T') || text.includes('quarto')) && text.length < 50) {
                console.log(`   - "${text}" [classe: ${classes.substring(0, 30)}] [data: ${dataAttrs.join(',')}]`);
            }
        });
        
        // 5. TENTAR EXTRAIR DADOS COM DIFERENTES ESTRAT√âGIAS
        console.log('\nüéØ TESTE DE EXTRA√á√ÉO:');
        
        // Estrat√©gia 1: Por posi√ß√£o/ordem dos elementos
        const spanElements = $el.find('span').toArray();
        console.log(`   üìä Total de spans: ${spanElements.length}`);
        
        spanElements.forEach((span, idx) => {
            const text = $(span).text().trim();
            if (text && text.length < 100 && (text.includes('‚Ç¨') || text.includes('m¬≤') || text.includes('T') || text.includes('quarto'))) {
                console.log(`   Span[${idx}]: "${text}"`);
            }
        });
        
        // Estrat√©gia 2: Por estrutura hier√°rquica
        console.log('\n   üå≥ Estrutura hier√°rquica:');
        $el.children().each((idx, child) => {
            const $child = $(child);
            const tag = child.tagName.toLowerCase();
            const text = $child.text().trim();
            if (text.length > 0 && text.length < 200) {
                console.log(`   ${tag}[${idx}]: "${text.substring(0, 100)}"`);
            }
        });
        
        console.log('\n' + '='.repeat(50));
    }
    
    // 6. SUGEST√ïES DE SELETORES
    console.log('\nüí° SUGEST√ïES DE SELETORES BASEADO NA AN√ÅLISE:');
    
    // Procurar padr√µes comuns
    const firstElement = $(containers[0]);
    
    // Testar seletores data-*
    const dataSelectors = [];
    firstElement.find('*[data-cy], *[data-testid], *[data-qa]').each((i, el) => {
        const $el = $(el);
        ['data-cy', 'data-testid', 'data-qa'].forEach(attr => {
            const value = $el.attr(attr);
            if (value) {
                dataSelectors.push(`[${attr}="${value}"]`);
            }
        });
    });
    
    if (dataSelectors.length > 0) {
        console.log('   üéØ Seletores data-* encontrados:');
        dataSelectors.slice(0, 10).forEach(sel => {
            console.log(`      ${sel}`);
        });
    }
    
    console.log('\n‚úÖ Debug Im√≥Virtual conclu√≠do!');
}

// FUN√á√ÉO DE DEBUG PARA ERA
async function debugERAStructure($, criteria) {
    console.log('\nüîç === DEBUG DETALHADO ERA PORTUGAL ===');
    
    const containerTests = [
        'div[class*="property"]',
        'div[class*="listing"]', 
        'div[class*="imovel"]',
        'article',
        '.property-card',
        '.listing-item'
    ];
    
    for (const selector of containerTests) {
        const found = $(selector);
        console.log(`üîç Teste container "${selector}": ${found.length} elementos`);
    }
    
    // Procurar por qualquer elemento que contenha dados de im√≥veis
    console.log('\nüîç Procurando elementos com dados de im√≥veis...');
    
    const elementsWithPrice = $('*:contains("‚Ç¨")').length;
    const elementsWithArea = $('*:contains("m¬≤")').length;
    const elementsWithRooms = $('*:contains("T1"), *:contains("T2"), *:contains("T3"), *:contains("T4")').length;
    
    console.log(`   üí∞ Elementos com pre√ßos (‚Ç¨): ${elementsWithPrice}`);
    console.log(`   üìê Elementos com √°reas (m¬≤): ${elementsWithArea}`);
    console.log(`   üè† Elementos com tipologias (T1-T4): ${elementsWithRooms}`);
    
    if (elementsWithPrice > 0 || elementsWithArea > 0 || elementsWithRooms > 0) {
        console.log('\nüéØ ERA tem dados de im√≥veis, mas os containers n√£o est√£o sendo detectados!');
        
        // Mostrar alguns elementos que cont√™m dados
        $('*:contains("‚Ç¨")').slice(0, 5).each((i, el) => {
            const $el = $(el);
            const text = $el.text().trim();
            const tag = el.tagName.toLowerCase();
            const classes = $el.attr('class') || '';
            if (text.length < 100) {
                console.log(`   üí∞ ${tag}.${classes}: "${text}"`);
            }
        });
    } else {
        console.log('‚ùå ERA n√£o tem dados de im√≥veis detect√°veis ou p√°gina diferente do esperado');
    }
    
    console.log('\n‚úÖ Debug ERA conclu√≠do!');
}

function parseQuery(query) {
    const criteria = {
        location: '',
        rooms: '',
        area: '',
        condition: '',
        type: 'apartamento'
    };
    
    const queryLower = query.toLowerCase()
        .replace(/√£/g, 'a')
        .replace(/√µ/g, 'o')
        .replace(/√°/g, 'a')
        .replace(/√©/g, 'e')
        .replace(/√≠/g, 'i')
        .replace(/√≥/g, 'o')
        .replace(/√∫/g, 'u')
        .replace(/√ß/g, 'c');
    
    // Extrair tipologia
    const roomsMatch = queryLower.match(/t(\d+)/);
    if (roomsMatch) {
        criteria.rooms = `T${roomsMatch[1]}`;
    }
    
    // Extrair √°rea
    const areaMatch = queryLower.match(/(\d+)\s*m[2¬≤]?/);
    if (areaMatch) {
        criteria.area = parseInt(areaMatch[1]);
    }
    
    // Lista de localiza√ß√µes
    const locations = [
        'lisboa', 'porto', 'braga', 'coimbra', 'aveiro', 'setubal', 'evora', 'faro',
        'funchal', 'viseu', 'leiria', 'santarem', 'beja', 'castelo branco',
        'guarda', 'portalegre', 'vila real', 'braganca', 'viana do castelo',
        'cascais', 'sintra', 'almada', 'amadora', 'oeiras', 'loures', 'odivelas',
        'vila nova de gaia', 'matosinhos', 'gondomar', 'maia', 'povoa de varzim',
        'caldas da rainha', 'torres vedras', 'sesimbra', 'palmela', 'montijo',
        'barreiro', 'vila franca de xira', 'mafra', 'alcochete', 'sines',
        'lagos', 'portimao', 'tavira', 'olhao', 'silves', 'monchique'
    ];
    
    // Procurar localiza√ß√£o na query
    for (const loc of locations) {
        if (queryLower.includes(loc)) {
            criteria.location = loc;
            break;
        }
    }
    
    // Extrair condi√ß√£o
    const conditions = ['novo', 'renovado', 'para renovar', 'usado', 'recente', 'seminovo'];
    for (const cond of conditions) {
        if (queryLower.includes(cond)) {
            criteria.condition = cond;
            break;
        }
    }
    
    // Extrair tipo de im√≥vel
    if (queryLower.includes('moradia') || queryLower.includes('casa') || queryLower.includes('vivenda')) {
        criteria.type = 'moradia';
    } else if (queryLower.includes('apartamento') || queryLower.includes('apto') || queryLower.includes('t0') || queryLower.includes('t1') || queryLower.includes('t2') || queryLower.includes('t3') || queryLower.includes('t4') || queryLower.includes('t5')) {
        criteria.type = 'apartamento';
    }
    
    return criteria;
}

main().catch(console.error);
