import { Actor } from 'apify';
import { CheerioCrawler } from 'crawlee';
import locations from './locations.json' with { type: 'json' };

await Actor.init();

const input = await Actor.getInput();
const query = input?.query || 'T3 santo antonio dos cavaleiros';
const maxResults = input?.max_resultados || 5;

console.log('üîç Query:', query);

// Detectar se √© arrendamento ou compra/venda
function detectSearchType(query) {
    const rentKeywords = /arrendamento|arrendar|alugar|rent|rental/i;
    const isRent = rentKeywords.test(query);
    
    console.log(`üéØ Tipo detectado: ${isRent ? 'ARRENDAMENTO' : 'COMPRA/VENDA'}`);
    return isRent ? 'rent' : 'buy';
}

// Detectar estado do im√≥vel
function detectPropertyCondition(query) {
    const newKeywords = /novo|novos|nova|novas|constru√ß√£o nova|obra nova/i;
    const usedKeywords = /usado|usados|usada|usadas|segunda m√£o/i;
    const renovatedKeywords = /renovado|renovados|renovada|renovadas|remodelado|restaurado/i;
    
    if (newKeywords.test(query)) {
        console.log('üèóÔ∏è Estado detectado: NOVO');
        return 'new';
    } else if (renovatedKeywords.test(query)) {
        console.log('üî® Estado detectado: RENOVADO');
        return 'renovated';
    } else if (usedKeywords.test(query)) {
        console.log('üè† Estado detectado: USADO');
        return 'used';
    }
    
    console.log('‚ùì Estado n√£o especificado');
    return null;
}

// Extrair apenas o essencial
function extractBasics(query) {
    // Melhor detec√ß√£o de localiza√ß√£o - procurar por nomes mais espec√≠ficos primeiro
    const locationPatterns = [
        /santo ant[o√¥]nio dos cavaleiros/i,
        /caldas da rainha/i,
        /vila nova de gaia/i,
        /santa maria da feira/i,
        /s[a√£]o jo[a√£]o da madeira/i,
        /lisboa|porto|coimbra|braga|loures|sintra|cascais|almada|amadora|set√∫bal|aveiro/i
    ];
    
    let location = '';
    for (const pattern of locationPatterns) {
        const match = query.match(pattern);
        if (match) {
            location = match[0].toLowerCase();
            break;
        }
    }
    
    const rooms = query.match(/T(\d)/i)?.[0]?.toUpperCase() || '';
    const searchType = detectSearchType(query);
    const condition = detectPropertyCondition(query);
    
    console.log(`üìç Localiza√ß√£o extra√≠da: "${location}"`);
    console.log(`üè† Tipologia: ${rooms}`);
    console.log(`üèóÔ∏è Estado: ${condition || 'n√£o especificado'}`);
    
    return { location, rooms, searchType, condition };
}

// Fun√ß√£o para extrair tipologia do texto (melhorada)
function extractRoomsFromText(text) {
    // Limpar CSS primeiro - regex mais espec√≠fico
    let cleanText = text.replace(/\.css-[a-zA-Z0-9_-]+[\{\[]/g, ' ');
    cleanText = cleanText.replace(/\d+\s*\/\s*\d+/g, ' '); // Remove fra√ß√µes como "1/25"
    cleanText = cleanText.replace(/\s+/g, ' ').trim();
    
    console.log('üîç Texto limpo para tipologia:', cleanText.substring(0, 100));
    
    // Procurar padr√µes mais espec√≠ficos primeiro
    const specificPatterns = [
        /apartamento\s+T(\d+)/i,
        /tipologia\s*:?\s*T(\d+)/i,
        /T(\d+)\s+(?:apartamento|ap\.)/i,
        /(\d+)\s+quartos/i,
        /(\d+)\s+bedroom/i
    ];
    
    for (const pattern of specificPatterns) {
        const match = cleanText.match(pattern);
        if (match) {
            const rooms = match[1] ? `T${match[1]}` : '';
            if (rooms) {
                console.log('üéØ Tipologia espec√≠fica encontrada:', rooms);
                return rooms;
            }
        }
    }
    
    // Fallback para padr√£o simples T1, T2, etc.
    const simpleMatch = cleanText.match(/T(\d+)/i);
    if (simpleMatch) {
        const rooms = simpleMatch[0].toUpperCase();
        console.log('üè† Tipologia simples encontrada:', rooms);
        return rooms;
    }
    
    console.log('‚ùå Nenhuma tipologia encontrada no texto');
    return '';
}

// Fun√ß√£o para extrair √°rea do texto (melhorada)
function extractAreaFromText(text) {
    // Limpar o texto de CSS e elementos desnecess√°rios
    let cleanText = text.replace(/\.css-[a-zA-Z0-9_-]+[\{\[]/g, ' ');
    cleanText = cleanText.replace(/\d+\s*\/\s*\d+/g, ' '); // Remove fra√ß√µes
    cleanText = cleanText.replace(/\s+/g, ' ').trim();
    
    const areaPatterns = [
        /(\d+(?:[,\.]\d+)?)\s*m[¬≤2]/i,        // 108,28 m¬≤ ou 108.28 m¬≤
        /√°rea\s*:?\s*(\d+(?:[,\.]\d+)?)\s*m/i, // √Årea: 108 m
        /(\d+)\s*metros\s*quadrados/i          // 108 metros quadrados
    ];
    
    for (const pattern of areaPatterns) {
        const match = cleanText.match(pattern);
        if (match) {
            let area = parseFloat(match[1].replace(',', '.'));
            if (area > 15 && area < 2000) { // √Årea mais realista para apartamentos
                console.log(`üìê √Årea encontrada: ${Math.round(area)}m¬≤`);
                return Math.round(area);
            }
        }
    }
    
    console.log('‚ùå √Årea n√£o encontrada');
    return 0;
}

// Fun√ß√£o para extrair pre√ßo do texto (melhorada)
function extractPriceFromText(text, searchType) {
    // Limpar CSS e elementos n√£o relacionados com pre√ßos
    let cleanText = text.replace(/\.css-[a-zA-Z0-9_-]+[\{\[]/g, ' ');
    cleanText = cleanText.replace(/\d+\s*\/\s*\d+/g, ' '); // Remove fra√ß√µes como "1/25"
    cleanText = cleanText.replace(/\s+/g, ' ').trim();
    
    console.log('üí∞ Texto para extrair pre√ßo (primeiros 150 chars):', cleanText.substring(0, 150));
    
    // Padr√µes mais espec√≠ficos para pre√ßos - ORDEM IMPORTA
    const pricePatterns = [
        // Para venda: "175 000 ‚Ç¨" ou "1 330 000 ‚Ç¨" (padr√£o mais comum)
        /(\d{1,3}(?:\s+\d{3})+)\s*‚Ç¨(?!\s*\/)/g,
        // Formato com pontos: "175.000 ‚Ç¨" ou "175,000 ‚Ç¨"  
        /(\d{1,3}(?:[,\.]\d{3})+)\s*‚Ç¨(?!\s*\/)/g,
        // Pre√ßos sem separadores mas realistas para venda: 150000-2000000
        /(\d{6,7})\s*‚Ç¨(?!\s*\/)/g,
        // Para arrendamento: "750 ‚Ç¨/m√™s" ou "1500 ‚Ç¨/m√™s"
        /(\d{3,4})\s*‚Ç¨\/m[√™e]s/g,
        // Pre√ßos de arrendamento simples (s√≥ se for rent)
        searchType === 'rent' ? /(\d{3,4})\s*‚Ç¨(?!\s*\/)/g : null
    ].filter(Boolean);
    
    let prices = [];
    
    for (const pattern of pricePatterns) {
        let match;
        pattern.lastIndex = 0; // Reset regex
        
        while ((match = pattern.exec(cleanText)) !== null) {
            let priceStr = match[1];
            console.log(`üîç Match de pre√ßo encontrado: "${priceStr}"`);
            
            // Processar string do pre√ßo
            let numericStr = priceStr.replace(/\s+/g, '').replace(/[,\.]/g, '');
            let price = parseInt(numericStr);
            
            // Validar range baseado no tipo - RANGES MAIS ESPEC√çFICOS
            let isValidRange;
            if (searchType === 'rent') {
                isValidRange = price >= 250 && price <= 8000;
            } else {
                // Para venda - ranges muito mais espec√≠ficos
                isValidRange = price >= 50000 && price <= 3000000;
            }
            
            if (isValidRange) {
                prices.push(price);
                console.log(`‚úÖ Pre√ßo v√°lido: ${price.toLocaleString()}‚Ç¨`);
            } else {
                console.log(`‚ùå Pre√ßo fora do range: ${price.toLocaleString()}‚Ç¨`);
            }
        }
    }
    
    // Retornar o pre√ßo mais prov√°vel
    if (prices.length > 0) {
        // Para venda: escolher o maior pre√ßo v√°lido (principal)
        // Para arrendamento: escolher o menor (mais prov√°vel ser mensal)
        const finalPrice = searchType === 'rent' ? Math.min(...prices) : Math.max(...prices);
        console.log(`üéØ Pre√ßo final escolhido: ${finalPrice.toLocaleString()}‚Ç¨`);
        return finalPrice;
    }
    
    console.log('‚ùå Nenhum pre√ßo v√°lido encontrado');
    return 0;
}

// FUN√á√ÉO CORRIGIDA - Melhor matching de localiza√ß√µes
function findSlugFromLocation(locationQuery) {
    console.log(`üîç A procurar localiza√ß√£o: "${locationQuery}"`);
    
    // Verificar estrutura do locations.json
    console.log('üìä Estrutura do locations:', {
        hasDistricts: Array.isArray(locations.districts),
        hasCouncils: Array.isArray(locations.councils),
        hasParishes: Array.isArray(locations.parishes),
        hasNeighborhoods: Array.isArray(locations.neighborhoods),
        locationKeys: Object.keys(locations)
    });
    
    // CORRIGIR: Verificar se locations tem a estrutura FINAL_CONSOLIDATED_DATA
    let allLocationArrays = {};
    
    if (locations.districts && locations.councils && locations.parishes && locations.neighborhoods) {
        // Estrutura direta
        allLocationArrays = locations;
    } else if (Array.isArray(locations) && locations.length > 0) {
        // Estrutura em array - procurar pelo FINAL_CONSOLIDATED_DATA
        const consolidatedData = locations.find(item => item.type === 'FINAL_CONSOLIDATED_DATA');
        if (consolidatedData) {
            allLocationArrays = consolidatedData;
            console.log('‚úÖ Encontrou dados consolidados no array');
        } else {
            console.log('‚ùå N√£o encontrou FINAL_CONSOLIDATED_DATA no array');
            return null;
        }
    } else {
        console.log('‚ùå Estrutura do locations.json n√£o reconhecida');
        return null;
    }
    
    if (!Array.isArray(allLocationArrays.districts) || !Array.isArray(allLocationArrays.councils) || 
        !Array.isArray(allLocationArrays.parishes) || !Array.isArray(allLocationArrays.neighborhoods)) {
        console.log('‚ùå Arrays de localiza√ß√£o inv√°lidos');
        return null;
    }

    const normalized = locationQuery.normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();

    console.log('üîç Localiza√ß√£o normalizada:', normalized);

    // PRIORIDADE ALTERADA: bairros primeiro, depois freguesias
    const allLocations = [
        ...allLocationArrays.neighborhoods.map(n => ({...n, priority: 4})), // PRIORIDADE M√ÅXIMA para bairros
        ...allLocationArrays.parishes.map(p => ({...p, priority: 3})), // Alta para freguesias
        ...allLocationArrays.councils.map(c => ({...c, priority: 2})), // M√©dia para concelhos
        ...allLocationArrays.districts.map(d => ({...d, priority: 1})) // Baixa para distritos
    ];

    console.log(`üìä Total de ${allLocations.length} localiza√ß√µes para analisar`);

    let bestMatch = null;
    let bestScore = 0;

    for (const location of allLocations) {
        // Normalizar nome da localiza√ß√£o
        const locationName = location.name.normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .toLowerCase()
            .replace(/[^a-z0-9\s]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();

        // Calcular score de matching
        let score = 0;
        
        // Match exacto tem score m√°ximo
        if (normalized.includes(locationName) || locationName.includes(normalized)) {
            score = locationName.length * location.priority * 10;
            
            // Bonus para matches mais espec√≠ficos
            if (locationName === normalized) {
                score *= 2; // Match exacto completo
            }
            
            console.log(`üéØ Match encontrado: "${location.name}" (${location.level}) (score: ${score})`);
            
            if (score > bestScore) {
                bestScore = score;
                bestMatch = location;
            }
        }
    }

    if (bestMatch) {
        console.log(`‚úÖ Melhor match encontrado: ${bestMatch.name} (${bestMatch.level}) - Score: ${bestScore}`);
        console.log(`   Full name: ${bestMatch.fullName}`);
        console.log(`   ID: ${bestMatch.id}`);
        
        return bestMatch;
    }
    
    console.log('‚ùå Nenhuma localiza√ß√£o encontrada');
    return null;
}

// URL CORRIGIDA com formato do Im√≥Virtual
function buildURL(locationQuery, rooms, searchType, condition) {
    // BASE URL CORRIGIDA
    let baseUrl = 'https://www.imovirtual.com/pt/resultados/';
    baseUrl += searchType === 'rent' ? 'arrendar/apartamento' : 'comprar/apartamento';
    
    // ADICIONAR TIPOLOGIA NA BASE (formato: apartamento,t3)
    if (rooms) {
        const roomNum = rooms.replace('T', '').toLowerCase();
        baseUrl += `,t${roomNum}`;
        console.log(`üè† Tipologia T${roomNum} adicionada √† base URL`);
    }

    const match = findSlugFromLocation(locationQuery);
    if (match) {
        // USAR O ID COMPLETO DO MATCH
        baseUrl += `/${match.id}`;
        console.log(`üéØ URL com localiza√ß√£o: ${match.fullName} (${match.level})`);
        console.log(`   ID usado: ${match.id}`);
    } else {
        console.log('üè† URL sem localiza√ß√£o espec√≠fica');
    }

    // ADICIONAR PAR√ÇMETROS EXTRAS (como no exemplo real)
    const params = new URLSearchParams();
    params.set('limit', '36');
    params.set('ownerTypeSingleSelect', 'ALL');
    params.set('by', 'DEFAULT');
    params.set('direction', 'DESC');

    // Adicionar filtro de estado se especificado
    if (condition) {
        switch (condition) {
            case 'new':
                params.set('search[filter_enum_builttype]', '0'); // Obra nova
                break;
            case 'used':
                params.set('search[filter_enum_builttype]', '1'); // Usado
                break;
            case 'renovated':
                params.set('search[filter_enum_builttype]', '2'); // Renovado
                break;
        }
        console.log(`üèóÔ∏è Filtro estado "${condition}" adicionado`);
    }

    const finalUrl = baseUrl + '?' + params.toString();
    return finalUrl;
}

const { location, rooms: searchRooms, searchType, condition } = extractBasics(query);
const searchUrl = buildURL(location, searchRooms, searchType, condition);

console.log('üåê URL final:', searchUrl);
console.log(`üéØ Pesquisa: ${searchType.toUpperCase()} | Tipologia: ${searchRooms} | Estado: ${condition || 'qualquer'}`);

const results = [];
const debugResults = []; // Array separado para items de debug

const crawler = new CheerioCrawler({
    maxRequestsPerCrawl: 3,
    requestHandlerTimeoutSecs: 30,
    
    async requestHandler({ $, response, request }) {
        if (response.statusCode !== 200) {
            console.log(`‚ùå Erro HTTP: ${response.statusCode}`);
            return;
        }
        
        console.log('‚úÖ P√°gina carregada com sucesso');
        console.log('üåê URL actual:', request.loadedUrl);
        console.log('üéØ URL original solicitado:', request.url);
        
        // Verificar se houve redirecionamento
        if (request.loadedUrl !== request.url) {
            console.log('üîÑ REDIRECIONAMENTO DETECTADO!');
            console.log('   Pode indicar que a localiza√ß√£o espec√≠fica tem poucos im√≥veis');
        }
        
        // SELETORES ATUALIZADOS para novo formato do Im√≥Virtual
        const selectors = [
            'article[data-cy="listing-item"]',           // Seletor principal
            'div[data-cy="search.listing.organic"]',     // Alternativo
            'article[data-testid="listing-item"]',       // Novo formato
            'article',                                   // Fallback gen√©rico
            '.offer-item',                              // Antigo formato
            '.listing-item'                             // Mais antigo ainda
        ];
        
        let listings = $();
        
        for (const sel of selectors) {
            listings = $(sel);
            if (listings.length > 0) {
                console.log(`üìä ${listings.length} an√∫ncios encontrados com seletor '${sel}'`);
                break;
            }
        }
        
        if (listings.length === 0) {
            console.log('‚ùå Nenhum an√∫ncio encontrado na p√°gina');
            console.log('üîç HTML snippet:', $('body').html().substring(0, 500));
            return;
        }
        
        let count = 0;
        
        // CORRIGIDO: Usar for loop em vez de .each() para poder usar await
        const listingArray = listings.toArray().slice(0, maxResults * 3);
        
        for (let i = 0; i < listingArray.length && count < maxResults; i++) {
            try {
                const el = listingArray[i];
                const $el = $(el);
                const rawText = $el.text();
                
                console.log(`\n--- AN√öNCIO ${i + 1} ---`);
                
                // LINKS ATUALIZADOS - Novos formatos do Im√≥Virtual
                const linkSelectors = [
                    'a[href*="/pt/anuncio/"]',                  // Novo formato: /pt/anuncio/apartamento-t1-parque-das-nacoes-ID1h9Q9
                    'a[href*="ID"]',                           // Links com ID
                    'a[href*="/anuncio/"]',                    // Formato sem /pt/
                    'a[href*="/apartamento-"]',                // Formato antigo
                    'a[href^="/pt/"]',                         // Qualquer link que comece com /pt/
                    'a[href]'                                  // Qualquer link como √∫ltimo recurso
                ];
                
                let link = '';
                for (const linkSel of linkSelectors) {
                    const linkEl = $el.find(linkSel).first();
                    link = linkEl.attr('href') || '';
                    if (link && (link.includes('anuncio') || link.includes('apartamento') || link.includes('ID'))) {
                        if (!link.startsWith('http')) {
                            link = 'https://www.imovirtual.com' + link;
                        }
                        console.log(`üîó Link encontrado com '${linkSel}': ${link.substring(0, 80)}...`);
                        break;
                    }
                }
                
                if (!link) {
                    console.log('‚ùå Nenhum link v√°lido encontrado');
                    continue;
                }
                
                // T√çTULO MELHORADO - Novos seletores
                let title = '';
                const titleSelectors = [
                    'h2[data-cy="listing-item-title"]',        // Seletor espec√≠fico do Im√≥Virtual
                    'h3 a span',
                    'h3 a', 
                    'h2 a span',
                    'h2 a',
                    'h1', 'h2', 'h3',                          // Headers gen√©ricos
                    '[data-cy*="title"]',
                    'a[title]',
                    '.offer-title',                             // Classes antigas
                    '.listing-title'
                ];
                
                for (const sel of titleSelectors) {
                    const titleEl = $el.find(sel).first();
                    title = titleEl.text().trim() || titleEl.attr('title') || '';
                    if (title && title.length > 10 && !title.includes('css-') && !title.match(/^\d+$/)) {
                        console.log(`üìã T√≠tulo encontrado com '${sel}': ${title.substring(0, 50)}...`);
                        break;
                    }
                }
                
                if (!title || title.length < 10) {
                    title = 'Apartamento para ' + (searchType === 'rent' ? 'arrendamento' : 'venda');
                    console.log('üìã T√≠tulo fallback usado');
                }
                
                // Extrair dados usando as fun√ß√µes existentes
                const price = extractPriceFromText(rawText, searchType);
                const actualRooms = extractRoomsFromText(rawText) || searchRooms;
                const area = extractAreaFromText(rawText);
                
                console.log(`üí∞ Pre√ßo: ${price.toLocaleString()}‚Ç¨`);
                console.log(`üè† Tipologia: ${actualRooms}`);
                console.log(`üìê √Årea: ${area}m¬≤`);
                
                // Crit√©rios de valida√ß√£o mais flex√≠veis
                const searchRoomNum = searchRooms ? parseInt(searchRooms.replace('T', '')) : 0;
                const actualRoomNum = actualRooms ? parseInt(actualRooms.replace('T', '')) : 0;
                
                // Valida√ß√µes
                const hasValidPrice = price > 0;
                const hasTitle = title && title.length > 10;
                const roomsMatch = !searchRooms || Math.abs(actualRoomNum - searchRoomNum) <= 1; // ¬±1 toler√¢ncia
                
                // Range de pre√ßos mais realista
                let priceInRange;
                if (searchType === 'rent') {
                    priceInRange = price >= 200 && price <= 5000;
                } else {
                    priceInRange = price >= 25000 && price <= 2000000;
                }
                
                const isValid = hasValidPrice && hasTitle && roomsMatch && priceInRange;
                
                // Criar objeto do an√∫ncio
                const property = {
                    title: title.substring(0, 200),
                    price: price,
                    area: area,
                    rooms: actualRooms,
                    location: location,
                    pricePerSqm: area > 0 ? Math.round(price / area) : 0,
                    link: link,
                    site: 'Im√≥Virtual',
                    searchQuery: query,
                    searchedRooms: searchRooms,
                    searchType: searchType,
                    condition: condition,
                    propertyIndex: count + 1,
                    totalProperties: maxResults,
                    priceFormatted: `${price.toLocaleString()} ‚Ç¨`,
                    areaFormatted: `${area} m¬≤`,
                    pricePerSqmFormatted: area > 0 ? `${Math.round(price / area).toLocaleString()} ‚Ç¨/m¬≤` : 'N/A',
                    timestamp: new Date().toISOString(),
                    isValidMatch: isValid,
                    searchUrl: request.loadedUrl
                };
                
                if (isValid) {
                    results.push(property);
                    count++;
                    
                    const typeIcon = searchType === 'rent' ? 'üè†' : 'üí∞';
                    const conditionIcon = condition === 'new' ? 'üÜï' : condition === 'used' ? 'üè†' : condition === 'renovated' ? 'üî®' : '';
                    console.log(`‚úÖ ${count}. ${typeIcon}${conditionIcon} ADICIONADO: ${actualRooms} - ${area}m¬≤ - ${price.toLocaleString()}‚Ç¨`);
                } else {
                    // Log detalhado para debugging
                    console.log(`‚ùå REJEITADO (mas link capturado):`);
                    if (!hasValidPrice) console.log(`   - Pre√ßo inv√°lido: ${price}`);
                    if (!hasTitle) console.log(`   - T√≠tulo inv√°lido: "${title}"`);
                    if (!roomsMatch) console.log(`   - Tipologia n√£o match: ${actualRooms} vs ${searchRooms}`);
                    if (!priceInRange) console.log(`   - Pre√ßo fora do range: ${price.toLocaleString()}‚Ç¨`);
                    
                    // Para debugging, adicionar ao array de debug
                    debugResults.push({
                        ...property,
                        debugReason: 'n√£o_match_criterios',
                        validationIssues: {
                            hasValidPrice,
                            hasTitle,
                            roomsMatch,
                            priceInRange
                        }
                    });
                }
                
            } catch (error) {
                console.log(`‚ö†Ô∏è Erro no an√∫ncio ${i + 1}:`, error.message);
            }
        }
        
        console.log(`\nüéâ RESULTADO: ${count} de ${listingArray.length} an√∫ncios v√°lidos encontrados`);
    },
    
    failedRequestHandler({ request, error }) {
        console.log(`‚ùå Falha na requisi√ß√£o ${request.url}: ${error.message}`);
    }
});

try {
    await crawler.run([searchUrl]);
    
    if (results.length === 0) {
        console.log('‚ö†Ô∏è Nenhum resultado v√°lido encontrado na pesquisa espec√≠fica.');
        console.log('üîÑ A tentar URL mais gen√©rica (sem localiza√ß√£o espec√≠fica)...');
        
        // Tentar sem localiza√ß√£o espec√≠fica se n√£o encontrou nada
        const fallbackUrl = buildURL('', searchRooms, searchType, condition);
        console.log('üîó URL alternativa:', fallbackUrl);
        await crawler.run([fallbackUrl]);
        
        // Se ainda n√£o encontrou nada, tentar s√≥ com a tipologia
        if (results.length === 0) {
            console.log('üîÑ A tentar pesquisa ainda mais gen√©rica (s√≥ tipologia)...');
            let genericUrl = `https://www.imovirtual.com/pt/resultados/${searchType === 'rent' ? 'arrendar' : 'comprar'}/apartamento`;
            
            if (searchRooms) {
                const roomNum = searchRooms.replace('T', '').toLowerCase();
                genericUrl += `,t${roomNum}`;
            }
            
            genericUrl += '?limit=36&ownerTypeSingleSelect=ALL&by=DEFAULT&direction=DESC';
            console.log('üîó URL gen√©rica final:', genericUrl);
            await crawler.run([genericUrl]);
        }
    }
    
    // Guardar resultados v√°lidos
    await Actor.pushData(results);
    
    // Guardar resultados de debug separadamente
    if (debugResults.length > 0) {
        console.log(`üîç A guardar ${debugResults.length} items de debug...`);
        for (const debugItem of debugResults) {
            await Actor.pushData(debugItem);
        }
    }
    
    console.log(`‚úÖ Scraping conclu√≠do: ${results.length} resultados v√°lidos + ${debugResults.length} debug salvos`);
    
} catch (error) {
    console.log('‚ùå Erro no scraping:', error.message);
    await Actor.pushData(results); // Salvar o que conseguiu mesmo com erro
    
} finally {
    await Actor.exit();
}
