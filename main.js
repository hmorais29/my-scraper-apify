const { Actor } = require('apify');
const { RequestQueue, CheerioCrawler, Dataset } = require('crawlee');

const main = async () => {
    await Actor.init();
    
    const input = await Actor.getInput();
    console.log('üì• Input recebido:', input);
    
    const query = input.query || input.searchQuery || '';
    
    if (!query) {
        console.log('‚ùå Nenhuma query fornecida');
        await Actor.exit();
        return;
    }
    
    console.log(`üîç Query: "${query}"`);
    
    const searchCriteria = parseQuery(query);
    console.log('üìã Crit√©rios extra√≠dos:', searchCriteria);
    
    // ... [fun√ß√µes buildUrl permanecem iguais] ...
    function buildImovirtualUrl(criteria) {
        let url = 'https://www.imovirtual.com/comprar';
        
        if (criteria.type === 'apartamento') {
            url += '/apartamento';
        } else if (criteria.type === 'moradia') {
            url += '/moradia';
        }
        
        if (criteria.location) {
            const locationSlug = criteria.location.toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/√£/g, 'a')
                .replace(/√µ/g, 'o')
                .replace(/√°/g, 'a')
                .replace(/√©/g, 'e')
                .replace(/√≠/g, 'i')
                .replace(/√≥/g, 'o')
                .replace(/√∫/g, 'u')
                .replace(/√ß/g, 'c');
            url += `/${locationSlug}`;
        }
        
        const params = new URLSearchParams();
        
        if (criteria.rooms) {
            const roomNum = criteria.rooms.replace('T', '');
            params.append('search%5Bfilter_float_number_of_rooms%3Afrom%5D', roomNum);
            params.append('search%5Bfilter_float_number_of_rooms%3Ato%5D', roomNum);
        }
        
        if (criteria.area) {
            params.append('search%5Bfilter_float_m%3Afrom%5D', Math.max(1, criteria.area - 20));
            params.append('search%5Bfilter_float_m%3Ato%5D', criteria.area + 20);
        }
        
        const queryString = params.toString();
        return queryString ? `${url}?${queryString}` : url;
    }

    function buildEraUrl(criteria) {
        let url = 'https://www.era.pt/comprar';
        
        if (criteria.type === 'apartamento') {
            url += '/apartamentos';
        } else if (criteria.type === 'moradia') {
            url += '/moradias';
        }
        
        if (criteria.location) {
            const locationSlug = criteria.location.toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/√£/g, 'a')
                .replace(/√µ/g, 'o')
                .replace(/√°/g, 'a')
                .replace(/√©/g, 'e')
                .replace(/√≠/g, 'i')
                .replace(/√≥/g, 'o')
                .replace(/√∫/g, 'u')
                .replace(/√ß/g, 'c');
            url += `/${locationSlug}`;
        }
        
        return url;
    }

    const propertySites = [
        {
            name: 'Imovirtual',
            baseUrl: 'https://www.imovirtual.com',
            buildSearchUrl: buildImovirtualUrl,
            // SELETORES MAIS ESPEC√çFICOS PARA IMOVIRTUAL
            selectors: {
                container: 'article[data-cy="search.listing.organic"]',
                title: 'h3[data-cy="search.listing.title"] span',
                price: 'span[data-cy="search.listing.price"]',
                location: 'span[data-cy="search.listing.location"]',
                area: 'div[data-cy="search.listing.characteristics"] span:contains("m¬≤")',
                rooms: 'div[data-cy="search.listing.characteristics"] span:contains("quarto")',
                link: 'a[data-cy="search.listing.link"]'
            }
        },
        {
            name: 'ERA Portugal',
            baseUrl: 'https://www.era.pt',
            buildSearchUrl: buildEraUrl,
            selectors: {
                container: 'div[class*="property"], div[class*="listing"], div[class*="imovel"], div[class*="resultado"], .property-card, .property-item',
                title: 'a[href*="/imovel/"], a[href*="/propriedade/"], h3 a, h2 a, .property-title a',
                price: '*[class*="price"], *[class*="valor"], span:contains("‚Ç¨"), div:contains("‚Ç¨")',
                location: '*[class*="location"], *[class*="address"], *[class*="local"], span[class*="place"]',
                area: '*[class*="area"], *[class*="surface"], *:contains("m¬≤"), *:contains("m2")',
                rooms: '*[class*="room"], *[class*="quarto"], *[class*="tipologia"], *:contains("T1"), *:contains("T2"), *:contains("T3"), *:contains("T4")'
            }
        }
    ];
    
    const requestQueue = await RequestQueue.open();
    
    for (const site of propertySites) {
        try {
            const searchUrl = site.buildSearchUrl(searchCriteria);
            if (searchUrl) {
                console.log(`üåê ${site.name}: ${searchUrl}`);
                await requestQueue.addRequest({ 
                    url: searchUrl,
                    userData: { site, criteria: searchCriteria },
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'pt-PT,pt;q=0.9,en;q=0.8',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1'
                    }
                });
            }
        } catch (error) {
            console.log(`‚ùå Erro ao construir URL para ${site.name}:`, error.message);
        }
    }
    
    const crawler = new CheerioCrawler({
        requestQueue,
        maxRequestRetries: 2,
        maxConcurrency: 1,
        maxRequestsPerMinute: 1,
        requestHandlerTimeoutSecs: 60,
        requestHandler: async ({ request, $, response }) => {
            const { site, criteria } = request.userData;
            
            console.log(`\nüè† Processando ${site.name}...`);
            console.log(`üìä Status: ${response.statusCode}`);
            
            if (response.statusCode !== 200) {
                console.log(`‚ùå ${site.name} - Status: ${response.statusCode}`);
                return;
            }
            
            console.log(`‚úÖ ${site.name} acess√≠vel!`);
            console.log(`üìÑ Tamanho da p√°gina: ${$.html().length} caracteres`);
            
            const properties = [];
            
            if (site.name === 'Imovirtual') {
                properties.push(...extractImovirtualProperties($, site, criteria));
            } else {
                properties.push(...extractGenericProperties($, site, criteria));
            }
            
            const validProperties = properties.filter(prop => validateProperty(prop));
            const relevantProperties = validProperties.filter(prop => isPropertyRelevant(prop, criteria));
            
            console.log(`üìä ${site.name}: ${properties.length} extra√≠dos ‚Üí ${validProperties.length} v√°lidos ‚Üí ${relevantProperties.length} relevantes`);
            
            if (relevantProperties.length > 0) {
                await Dataset.pushData(relevantProperties.slice(0, 8));
            }
        },
        failedRequestHandler: async ({ request, error }) => {
            console.log(`‚ùå Falha em ${request.userData.site.name}: ${error.message}`);
        },
    });
    
    console.log('\nüöÄ Iniciando scraping...');
    await crawler.run();
    
    const dataset = await Dataset.open();
    const data = await dataset.getData();
    const totalProperties = data.items.length;
    
    console.log(`\nüéâ Scraping conclu√≠do!`);
    console.log(`üìä Total de im√≥veis encontrados: ${totalProperties}`);
    
    const bySite = {};
    data.items.forEach(item => {
        bySite[item.source] = (bySite[item.source] || 0) + 1;
    });
    
    console.log('\nüìà Resultados por site:');
    Object.entries(bySite).forEach(([site, count]) => {
        console.log(`  ${site}: ${count} im√≥veis`);
    });
    
    await Actor.exit();
};

// NOVA FUN√á√ÉO: Extra√ß√£o espec√≠fica para Im√≥Virtual
function extractImovirtualProperties($, site, criteria) {
    const properties = [];
    
    // Tentar primeiro os seletores espec√≠ficos data-cy
    let containers = $('article[data-cy="search.listing.organic"]');
    
    // Fallback para seletores gen√©ricos
    if (containers.length === 0) {
        console.log('üîç Tentando seletores gen√©ricos para Im√≥Virtual...');
        containers = $('article, div[class*="offer"], div[class*="listing-item"]');
    }
    
    console.log(`üîç Imovirtual: ${containers.length} containers encontrados`);
    
    containers.each((i, el) => {
        if (i >= 15) return; // Limitar resultados
        
        const $el = $(el);
        const property = extractImovirtualProperty($el, site);
        
        if (i < 3) {
            debugProperty(property, i + 1);
        }
        
        if (property.title && property.title.length > 10) {
            properties.push(property);
        }
    });
    
    return properties;
}

// NOVA FUN√á√ÉO: Extra√ß√£o individual do im√≥vel Im√≥Virtual
function extractImovirtualProperty($el, site) {
    const property = {
        title: '',
        price: '',
        location: '',
        area: '',
        rooms: '',
        link: '',
        source: site.name,
        scrapedAt: new Date().toISOString()
    };
    
    // 1. T√çTULO - Abordagem hier√°rquica
    property.title = extractTitle($el, site);
    
    // 2. LINK - Procurar link principal
    property.link = extractLink($el, site);
    
    // 3. PRE√áO - Seletores espec√≠ficos
    property.price = extractPrice($el);
    
    // 4. LOCALIZA√á√ÉO - M√∫ltiplas estrat√©gias
    property.location = extractLocation($el);
    
    // 5. √ÅREA - Valida√ß√£o rigorosa
    property.area = extractArea($el);
    
    // 6. QUARTOS - Padr√µes espec√≠ficos
    property.rooms = extractRooms($el);
    
    return property;
}

// FUN√á√ïES DE EXTRA√á√ÉO ESPEC√çFICAS

function extractTitle($el, site) {
    // Estrat√©gia 1: Seletores data-cy espec√≠ficos
    let title = $el.find('h3[data-cy="search.listing.title"] span').first().text().trim();
    
    // Estrat√©gia 2: Seletores h3/h2 gen√©ricos
    if (!title) {
        title = $el.find('h3 a, h2 a, h3, h2').first().text().trim();
    }
    
    // Estrat√©gia 3: Atributos title/aria-label
    if (!title) {
        const $link = $el.find('a[title], a[aria-label]').first();
        title = $link.attr('title') || $link.attr('aria-label') || '';
    }
    
    // Estrat√©gia 4: Extrair do URL
    if (!title || title.length < 10) {
        const $mainLink = $el.find('a[href*="/anuncio/"]').first();
        const href = $mainLink.attr('href');
        if (href) {
            const urlMatch = href.match(/\/([^\/]+)-ID\w+/);
            if (urlMatch) {
                title = urlMatch[1]
                    .split('-')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
            }
        }
    }
    
    // Valida√ß√£o final
    return isValidTitle(title) ? title : '';
}

function extractLink($el, site) {
    const $link = $el.find('a[data-cy="search.listing.link"], a[href*="/anuncio/"]').first();
    const href = $link.attr('href');
    
    if (!href || href === '#') return '';
    
    return href.startsWith('http') ? href : site.baseUrl + href;
}

function extractPrice($el) {
    // Estrat√©gia 1: Seletor espec√≠fico
    let price = $el.find('span[data-cy="search.listing.price"]').text().trim();
    
    // Estrat√©gia 2: Procurar por padr√£o de pre√ßo
    if (!price) {
        const allText = $el.text();
        const priceMatch = allText.match(/(\d{1,3}(?:[\.\s]\d{3})*(?:,\d{2})?\s*‚Ç¨)/);
        price = priceMatch ? priceMatch[1] : '';
    }
    
    return price;
}

function extractLocation($el) {
    // Estrat√©gia 1: Seletor espec√≠fico
    let location = $el.find('span[data-cy="search.listing.location"]').text().trim();
    
    // Estrat√©gia 2: Elementos com classes relacionadas
    if (!location) {
        location = $el.find('*[class*="location"], *[class*="address"]').text().trim();
    }
    
    // Estrat√©gia 3: Procurar cidades conhecidas no texto
    if (!location) {
        const allText = $el.text().toLowerCase();
        const cities = ['caldas da rainha', 'lisboa', 'porto', 'cascais', 'sintra', 'coimbra'];
        for (const city of cities) {
            if (allText.includes(city)) {
                location = city;
                break;
            }
        }
    }
    
    return location.toLowerCase();
}

function extractArea($el) {
    // Estrat√©gia 1: Seletor espec√≠fico para caracter√≠sticas
    let area = '';
    
    $el.find('div[data-cy="search.listing.characteristics"] span').each((i, span) => {
        const text = $(span).text().trim();
        // Procurar padr√£o mais espec√≠fico: n√∫mero seguido de m¬≤
        const match = text.match(/^(\d{1,4}(?:[,.]\d+)?)\s*m[¬≤2]$/i);
        if (match && !area) {
            const areaNum = parseInt(match[1].replace(',', '.'));
            // Validar se a √°rea faz sentido (5-1000m¬≤)
            if (areaNum >= 5 && areaNum <= 1000) {
                area = match[0];
            }
        }
    });
    
    // Estrat√©gia 2: Procurar em todo o elemento
    if (!area) {
        const allText = $el.text();
        const matches = allText.match(/(\d{1,4}(?:[,.]\d+)?)\s*m[¬≤2]/gi);
        if (matches) {
            // Pegar a √°rea que faz mais sentido (maior que 15m¬≤)
            for (const match of matches) {
                const areaNum = parseInt(match.replace(/[^\d]/g, ''));
                if (areaNum >= 15 && areaNum <= 1000) {
                    area = match;
                    break;
                }
            }
        }
    }
    
    return area;
}

function extractRooms($el) {
    // Estrat√©gia 1: Procurar em caracter√≠sticas
    let rooms = '';
    
    $el.find('div[data-cy="search.listing.characteristics"] span').each((i, span) => {
        const text = $(span).text().trim();
        
        // Padr√£o 1: "N quarto(s)"
        const roomMatch = text.match(/(\d+)\s*quarto[s]?/i);
        if (roomMatch && !rooms) {
            rooms = `T${roomMatch[1]}`;
            return;
        }
        
        // Padr√£o 2: "TN"
        const tMatch = text.match(/^T(\d+)$/i);
        if (tMatch && !rooms) {
            rooms = tMatch[0].toUpperCase();
            return;
        }
    });
    
    // Estrat√©gia 2: Procurar no t√≠tulo
    if (!rooms) {
        const titleText = $el.find('h3, h2').text();
        const tMatch = titleText.match(/T(\d+)/i);
        if (tMatch) {
            rooms = tMatch[0].toUpperCase();
        }
    }
    
    // Estrat√©gia 3: Procurar em todo o elemento
    if (!rooms) {
        const allText = $el.text();
        const tMatch = allText.match(/T([0-6])/i);
        if (tMatch) {
            rooms = tMatch[0].toUpperCase();
        }
    }
    
    return rooms;
}

// FUN√á√ÉO DE EXTRA√á√ÉO GEN√âRICA (para outros sites)
function extractGenericProperties($, site, criteria) {
    const properties = [];
    
    const containerSelectors = site.selectors.container.split(', ');
    let containers = $();
    
    for (const selector of containerSelectors) {
        const found = $(selector.trim());
        if (found.length > 0) {
            containers = found;
            break;
        }
    }
    
    console.log(`üîç ${site.name}: ${containers.length} containers encontrados`);
    
    containers.each((i, el) => {
        if (i >= 10) return;
        
        const $el = $(el);
        const property = {
            title: $el.find(site.selectors.title).first().text().trim(),
            price: extractGenericPrice($el),
            location: $el.find(site.selectors.location).first().text().trim().toLowerCase(),
            area: extractGenericArea($el),
            rooms: extractGenericRooms($el),
            link: extractGenericLink($el, site),
            source: site.name,
            scrapedAt: new Date().toISOString()
        };
        
        if (property.title && property.title.length > 10) {
            properties.push(property);
        }
    });
    
    return properties;
}

// FUN√á√ïES DE EXTRA√á√ÉO GEN√âRICAS
function extractGenericPrice($el) {
    const allText = $el.text();
    const priceMatch = allText.match(/(\d{1,3}(?:[\.\s]\d{3})*(?:,\d{2})?\s*‚Ç¨)/);
    return priceMatch ? priceMatch[1] : '';
}

function extractGenericArea($el) {
    const allText = $el.text();
    const matches = allText.match(/(\d{1,4}(?:[,.]\d+)?)\s*m[¬≤2]/gi);
    if (matches) {
        for (const match of matches) {
            const areaNum = parseInt(match.replace(/[^\d]/g, ''));
            if (areaNum >= 15 && areaNum <= 1000) {
                return match;
            }
        }
    }
    return '';
}

function extractGenericRooms($el) {
    const allText = $el.text();
    const tMatch = allText.match(/T([0-6])/i);
    return tMatch ? tMatch[0].toUpperCase() : '';
}

function extractGenericLink($el, site) {
    const $link = $el.find('a').first();
    const href = $link.attr('href');
    if (!href || href === '#') return '';
    return href.startsWith('http') ? href : site.baseUrl + href;
}

// FUN√á√ïES DE VALIDA√á√ÉO

function isValidTitle(title) {
    return title && 
           title.length > 10 && 
           !title.includes('css-') &&
           !title.includes('{') &&
           !title.includes('width:') &&
           !title.includes('height:') &&
           !title.includes('aspect-ratio:');
}

function validateProperty(property) {
    // Valida√ß√µes b√°sicas
    if (!property.title || property.title.length < 10) return false;
    if (!isValidTitle(property.title)) return false;
    
    // Pelo menos um dos campos importantes deve estar preenchido
    const hasPrice = property.price && property.price.includes('‚Ç¨');
    const hasLink = property.link && property.link.length > 10;
    const hasArea = property.area && property.area.includes('m');
    const hasRooms = property.rooms && property.rooms.match(/^T[0-6]$/);
    
    return hasPrice || hasLink || (hasArea && hasRooms);
}

function isPropertyRelevant(property, criteria) {
    if (!criteria.location && !criteria.rooms && !criteria.area) {
        return true;
    }
    
    let matches = 0;
    let totalCriteria = 0;
    
    // Verificar localiza√ß√£o - MAIS RESTRITIVO
    if (criteria.location) {
        totalCriteria++;
        const normalizedLocation = normalizeText(criteria.location);
        const propLocation = normalizeText(property.location);
        const propTitle = normalizeText(property.title);
        
        if (propLocation.includes(normalizedLocation) || propTitle.includes(normalizedLocation)) {
            matches++;
        }
    }
    
    // Verificar quartos - EXATO
    if (criteria.rooms) {
        totalCriteria++;
        if (property.rooms === criteria.rooms) {
            matches++;
        }
    }
    
    // Verificar √°rea - RANGE MAIS RESTRITO
    if (criteria.area) {
        totalCriteria++;
        const areaMatch = property.area.match(/(\d+)/);
        if (areaMatch) {
            const propArea = parseInt(areaMatch[1]);
            // Range mais restrito: ¬±15m¬≤
            if (Math.abs(propArea - criteria.area) <= 15) {
                matches++;
            }
        }
    }
    
    // MAIS RESTRITIVO: Precisa de pelo menos 80% de matches
    return totalCriteria === 0 || (matches / totalCriteria) >= 0.8;
}

// FUN√á√ïES AUXILIARES

function normalizeText(text) {
    return text.toLowerCase()
        .replace(/[√°√†√£√¢]/g, 'a')
        .replace(/[√©√™]/g, 'e')
        .replace(/[√≠√Æ]/g, 'i')
        .replace(/[√≥√¥√µ]/g, 'o')
        .replace(/[√∫√º]/g, 'u')
        .replace(/√ß/g, 'c');
}

function debugProperty(property, index) {
    console.log(`üèòÔ∏è Debug im√≥vel ${index}:`);
    console.log(`   üìù T√≠tulo: "${property.title}"`);
    console.log(`   üí∞ Pre√ßo: "${property.price}"`);
    console.log(`   üìç Local: "${property.location}"`);
    console.log(`   üìê √Årea: "${property.area}"`);
    console.log(`   üè† Quartos: "${property.rooms}"`);
    console.log(`   üîó Link: "${property.link}"`);
}

// FUN√á√ÉO parseQuery permanece igual
function parseQuery(query) {
    const criteria = {
        location: '',
        rooms: '',
        area: '',
        condition: '',
        type: 'apartamento'
    };
    
    const queryLower = query.toLowerCase()
        .replace(/√£/g, 'a')
        .replace(/√µ/g, 'o')
        .replace(/√°/g, 'a')
        .replace(/√©/g, 'e')
        .replace(/√≠/g, 'i')
        .replace(/√≥/g, 'o')
        .replace(/√∫/g, 'u')
        .replace(/√ß/g, 'c');
    
    // Extrair tipologia
    const roomsMatch = queryLower.match(/t(\d+)/);
    if (roomsMatch) {
        criteria.rooms = `T${roomsMatch[1]}`;
    }
    
    // Extrair √°rea
    const areaMatch = queryLower.match(/(\d+)\s*m[2¬≤]?/);
    if (areaMatch) {
        criteria.area = parseInt(areaMatch[1]);
    }
    
    // Lista de localiza√ß√µes
    const locations = [
        'lisboa', 'porto', 'braga', 'coimbra', 'aveiro', 'setubal', 'evora', 'faro',
        'funchal', 'viseu', 'leiria', 'santarem', 'beja', 'castelo branco',
        'guarda', 'portalegre', 'vila real', 'braganca', 'viana do castelo',
        'cascais', 'sintra', 'almada', 'amadora', 'oeiras', 'loures', 'odivelas',
        'vila nova de gaia', 'matosinhos', 'gondomar', 'maia', 'povoa de varzim',
        'caldas da rainha', 'torres vedras', 'sesimbra', 'palmela', 'montijo',
        'barreiro', 'vila franca de xira', 'mafra', 'alcochete', 'sines',
        'lagos', 'portimao', 'tavira', 'olhao', 'silves', 'monchique'
    ];
    
    // Procurar localiza√ß√£o na query
    for (const loc of locations) {
        if (queryLower.includes(loc)) {
            criteria.location = loc;
            break;
        }
    }
    
    // Extrair condi√ß√£o
    const conditions = ['novo', 'renovado', 'para renovar', 'usado', 'recente', 'seminovo'];
    for (const cond of conditions) {
        if (queryLower.includes(cond)) {
            criteria.condition = cond;
            break;
        }
    }
    
    // Extrair tipo de im√≥vel
    if (queryLower.includes('moradia') || queryLower.includes('casa') || queryLower.includes('vivenda')) {
        criteria.type = 'moradia';
    } else if (queryLower.includes('apartamento') || queryLower.includes('apto') || queryLower.includes('t0') || queryLower.includes('t1') || queryLower.includes('t2') || queryLower.includes('t3') || queryLower.includes('t4') || queryLower.includes('t5')) {
        criteria.type = 'apartamento';
    }
    
    return criteria;
}

main().catch(console.error);
