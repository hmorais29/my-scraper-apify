// queryExtractor.js

/**
 * Extrai informa√ß√µes b√°sicas da query de pesquisa
 */
export class QueryExtractor {
    
    /**
     * Detecta se √© arrendamento ou compra/venda
     */
    static detectSearchType(query) {
        const rentKeywords = /arrendamento|arrendar|alugar|rent|rental/i;
        const isRent = rentKeywords.test(query);
        
        console.log(`üéØ Tipo detectado: ${isRent ? 'ARRENDAMENTO' : 'COMPRA/VENDA'}`);
        return isRent ? 'rent' : 'buy';
    }

    /**
     * Detecta estado do im√≥vel (novo, usado, renovado)
     */
    static detectPropertyCondition(query) {
        const newKeywords = /novo|novos|nova|novas|constru√ß√£o nova|obra nova/i;
        const usedKeywords = /usado|usados|usada|usadas|segunda m√£o/i;
        const renovatedKeywords = /renovado|renovados|renovada|renovadas|remodelado|restaurado/i;
        
        if (newKeywords.test(query)) {
            console.log('üèóÔ∏è Estado detectado: NOVO');
            return 'new';
        } else if (renovatedKeywords.test(query)) {
            console.log('üî® Estado detectado: RENOVADO');
            return 'renovated';
        } else if (usedKeywords.test(query)) {
            console.log('üè† Estado detectado: USADO');
            return 'used';
        }
        
        console.log('‚ùì Estado n√£o especificado');
        return null;
    }

    /**
     * Extrai tipologia (T1, T2, T3, etc.)
     */
    static extractRooms(query) {
        const roomsMatch = query.match(/T(\d+)/i);
        const rooms = roomsMatch ? roomsMatch[0].toUpperCase() : '';
        
        console.log(`üè† Tipologia: ${rooms || 'n√£o especificada'}`);
        return rooms;
    }

    /**
     * Extrai m√∫ltiplas localiza√ß√µes da query usando regex melhorado
     * CORRIGIDO: Filtra pre√ßos e palavras irrelevantes
     */
    static extractLocations(query) {
        // Normalizar query
        const normalized = query.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[,;]/g, ' ') // Separadores
            .replace(/\s+/g, ' ')
            .trim();

        console.log(`üîç Query normalizada: "${normalized}"`);

        // Padr√µes de localiza√ß√£o melhorados
        const locationPatterns = [
            // Localiza√ß√µes compostas - mais espec√≠ficas primeiro
            /santo ant[o√¥]nio dos cavaleiros/i,
            /caldas da rainha/i,
            /vila nova de gaia/i,
            /santa maria da feira/i,
            /s[a√£]o jo[a√£]o da madeira/i,
            /camarate[,\s]+unhos[,\s]*e[,\s]*apelacao/i,
            /unhos[,\s]*e[,\s]*apelacao/i,
            
            // Localiza√ß√µes individuais - ordem por especificidade
            /apelacao|apela√ßao/i,
            /unhos/i,
            /camarate/i,
            /loures/i,
            /lisboa/i,
            /porto/i,
            /coimbra/i,
            /braga/i,
            /sintra/i,
            /cascais/i,
            /almada/i,
            /amadora/i,
            /set√∫bal/i,
            /aveiro/i
        ];

        const foundLocations = [];
        const processedText = normalized;

        for (const pattern of locationPatterns) {
            const matches = [...processedText.matchAll(new RegExp(pattern.source, 'gi'))];
            for (const match of matches) {
                const location = match[0].toLowerCase();
                if (!foundLocations.includes(location)) {
                    foundLocations.push(location);
                    console.log(`üìç Localiza√ß√£o encontrada (padr√£o): "${location}"`);
                }
            }
        }

        // Se n√£o encontrou nada espec√≠fico, extrair palavras candidatas
        if (foundLocations.length === 0) {
            const words = normalized.split(' ').filter(word => {
                // CORRIGIDO: Filtrar pre√ßos, n√∫meros, e palavras irrelevantes
                const isPricePattern = /^\d+k$/i.test(word) || /^\d{3,}$/i.test(word) || word.includes('‚Ç¨');
                const isIrrelevant = ['com', 'por', 'para', 'apartamento', 'casa', 'em', 'de', 'da', 'do', 'dos', 'das'].includes(word);
                const isTooShort = word.length <= 3;
                
                const shouldExclude = isPricePattern || isIrrelevant || isTooShort;
                
                if (shouldExclude) {
                    console.log(`‚ùå Palavra filtrada: "${word}" (${isPricePattern ? 'pre√ßo' : isIrrelevant ? 'irrelevante' : 'muito curta'})`);
                }
                
                return !shouldExclude;
            });
            
            console.log(`üîç Palavras candidatas (filtradas): ${words.join(', ')}`);
            return words;
        }

        return foundLocations;
    }

    /**
     * Extrai pre√ßo da query (se especificado) - APENAS para refer√™ncia, N√ÉO para limitar pesquisa
     */
    static extractPriceRange(query) {
        const pricePatterns = [
            /por\s+(\d+)k/i,
            /(\d+)k\s*‚Ç¨/i,
            /(\d{3,6})\s*‚Ç¨/i,
            /at√©\s+(\d+)/i,
            /max[√≠i]mo\s+(\d+)/i
        ];

        for (const pattern of pricePatterns) {
            const match = query.match(pattern);
            if (match) {
                let price = parseInt(match[1]);
                if (query.includes('k') || query.includes('K')) {
                    price *= 1000;
                }
                
                console.log(`üí∞ Pre√ßo extra√≠do (APENAS para refer√™ncia): ${price.toLocaleString()}‚Ç¨`);
                console.log(`‚ö†Ô∏è  NOTA: Pre√ßo N√ÉO ser√° usado para limitar a pesquisa`);
                
                // Retornar apenas para refer√™ncia, n√£o para usar no filtro
                return { reference: price, note: 'Para compara√ß√£o posterior, n√£o para filtrar' };
            }
        }

        return null;
    }

    /**
     * Extrai √°rea da query (se especificada)
     */
    static extractArea(query) {
        const areaPatterns = [
            /com\s+(\d+)m[¬≤2]/i,
            /(\d+)\s*m[¬≤2]/i,
            /(\d+)\s*metros/i
        ];

        for (const pattern of areaPatterns) {
            const match = query.match(pattern);
            if (match) {
                const area = parseInt(match[1]);
                console.log(`üìê √Årea extra√≠da: ${area}m¬≤`);
                return area;
            }
        }

        return null;
    }

    /**
     * Fun√ß√£o principal que extrai tudo
     */
    static extractAll(query) {
        console.log(`üîç A analisar query: "${query}"`);

        const result = {
            originalQuery: query,
            searchType: this.detectSearchType(query),
            condition: this.detectPropertyCondition(query),
            rooms: this.extractRooms(query),
            locations: this.extractLocations(query),
            priceRange: this.extractPriceRange(query),
            area: this.extractArea(query),
            timestamp: new Date().toISOString()
        };

        console.log('üìã Extra√ß√£o completa:', result);
        return result;
    }
}
